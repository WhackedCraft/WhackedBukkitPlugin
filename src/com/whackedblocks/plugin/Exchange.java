package com.whackedblocks.plugin;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.5.0.
 */
public class Exchange extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_GETASSETEMITTER = "getAssetEmitter";

    public static final String FUNC_SETASSETCLAIMSTRING = "setAssetClaimString";

    public static final String FUNC_SENDTRADEOFFER = "sendTradeOffer";

    public static final String FUNC_GETMYINVENTORY = "getMyInventory";

    public static final String FUNC_ASSIGN = "assign";

    public static final String FUNC_GETMYSENTTRADEOFFERID = "getMySentTradeOfferId";

    public static final String FUNC_GETTRADEOFFERSENDER = "getTradeOfferSender";

    public static final String FUNC_GETUSERSENTTRADEOFFERID = "getUserSentTradeOfferId";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_DECLINETRADEOFFER = "declineTradeOffer";

    public static final String FUNC_GETUSERINVENTORY = "getUserInventory";

    public static final String FUNC_GETTRADEOFFERSENDERITEMS = "getTradeOfferSenderItems";

    public static final String FUNC_ACCEPTTRADEOFFER = "acceptTradeOffer";

    public static final String FUNC_GETASSETDATA = "getAssetData";

    public static final String FUNC_CANCELTRADEOFFER = "cancelTradeOffer";

    public static final String FUNC_GETASSETOWNER = "getAssetOwner";

    public static final String FUNC_GETASSETCLAIMSTRING = "getAssetClaimString";

    public static final String FUNC_GETTRADEOFFERRECIPIENT = "getTradeOfferRecipient";

    public static final String FUNC_GETTRADEOFFERRECIPIENTITEMS = "getTradeOfferRecipientItems";

    public static final String FUNC_GETTRADEOFFERSTATE = "getTradeOfferState";

    public static final Event ASSETASSIGN_EVENT = new Event("AssetAssign", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ASSETBURN_EVENT = new Event("AssetBurn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event ASSETMOVE_EVENT = new Event("AssetMove", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ASSETCLAIMSTRINGSET_EVENT = new Event("AssetClaimStringSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event NEWTRADEOFFER_EVENT = new Event("NewTradeOffer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event MODIFYTRADEOFFER_EVENT = new Event("ModifyTradeOffer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
    ;

    protected Exchange(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Exchange(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public RemoteCall<String> getAssetEmitter(BigInteger _id) {
        final Function function = new Function(FUNC_GETASSETEMITTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setAssetClaimString(BigInteger _id, String _claim_string) {
        final Function function = new Function(
                FUNC_SETASSETCLAIMSTRING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id), 
                new org.web3j.abi.datatypes.Utf8String(_claim_string)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> sendTradeOffer(String _partner, List<BigInteger> _my_items, List<BigInteger> _their_items) {
        final Function function = new Function(
                FUNC_SENDTRADEOFFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_partner), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_my_items, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.Utils.typeMap(_their_items, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getMyInventory() {
        final Function function = new Function(FUNC_GETMYINVENTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> assign(String _owner, String _data) {
        final Function function = new Function(
                FUNC_ASSIGN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.Utf8String(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getMySentTradeOfferId() {
        final Function function = new Function(FUNC_GETMYSENTTRADEOFFERID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getTradeOfferSender(BigInteger _id) {
        final Function function = new Function(FUNC_GETTRADEOFFERSENDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> getUserSentTradeOfferId(String _address) {
        final Function function = new Function(FUNC_GETUSERSENTTRADEOFFERID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> burn(BigInteger _id) {
        final Function function = new Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> declineTradeOffer(BigInteger _offer_id) {
        final Function function = new Function(
                FUNC_DECLINETRADEOFFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_offer_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> getUserInventory(String _address) {
        final Function function = new Function(FUNC_GETUSERINVENTORY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_address)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<List> getTradeOfferSenderItems(BigInteger _id) {
        final Function function = new Function(FUNC_GETTRADEOFFERSENDERITEMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> acceptTradeOffer(BigInteger _offer_id) {
        final Function function = new Function(
                FUNC_ACCEPTTRADEOFFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_offer_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getAssetData(BigInteger _id) {
        final Function function = new Function(FUNC_GETASSETDATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> cancelTradeOffer() {
        final Function function = new Function(
                FUNC_CANCELTRADEOFFER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getAssetOwner(BigInteger _id) {
        final Function function = new Function(FUNC_GETASSETOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getAssetClaimString(BigInteger _id) {
        final Function function = new Function(FUNC_GETASSETCLAIMSTRING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getTradeOfferRecipient(BigInteger _id) {
        final Function function = new Function(FUNC_GETTRADEOFFERRECIPIENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<List> getTradeOfferRecipientItems(BigInteger _id) {
        final Function function = new Function(FUNC_GETTRADEOFFERRECIPIENTITEMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> getTradeOfferState(BigInteger _id) {
        final Function function = new Function(FUNC_GETTRADEOFFERSTATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<Exchange> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Exchange.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Exchange> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Exchange.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public List<AssetAssignEventResponse> getAssetAssignEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ASSETASSIGN_EVENT, transactionReceipt);
        ArrayList<AssetAssignEventResponse> responses = new ArrayList<AssetAssignEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AssetAssignEventResponse typedResponse = new AssetAssignEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.emitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.data = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AssetAssignEventResponse> assetAssignEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AssetAssignEventResponse>() {
            @Override
            public AssetAssignEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ASSETASSIGN_EVENT, log);
                AssetAssignEventResponse typedResponse = new AssetAssignEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.emitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.data = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<AssetAssignEventResponse> assetAssignEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ASSETASSIGN_EVENT));
        return assetAssignEventObservable(filter);
    }

    public List<AssetBurnEventResponse> getAssetBurnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ASSETBURN_EVENT, transactionReceipt);
        ArrayList<AssetBurnEventResponse> responses = new ArrayList<AssetBurnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AssetBurnEventResponse typedResponse = new AssetBurnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AssetBurnEventResponse> assetBurnEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AssetBurnEventResponse>() {
            @Override
            public AssetBurnEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ASSETBURN_EVENT, log);
                AssetBurnEventResponse typedResponse = new AssetBurnEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<AssetBurnEventResponse> assetBurnEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ASSETBURN_EVENT));
        return assetBurnEventObservable(filter);
    }

    public List<AssetMoveEventResponse> getAssetMoveEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ASSETMOVE_EVENT, transactionReceipt);
        ArrayList<AssetMoveEventResponse> responses = new ArrayList<AssetMoveEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AssetMoveEventResponse typedResponse = new AssetMoveEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AssetMoveEventResponse> assetMoveEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AssetMoveEventResponse>() {
            @Override
            public AssetMoveEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ASSETMOVE_EVENT, log);
                AssetMoveEventResponse typedResponse = new AssetMoveEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<AssetMoveEventResponse> assetMoveEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ASSETMOVE_EVENT));
        return assetMoveEventObservable(filter);
    }

    public List<AssetClaimStringSetEventResponse> getAssetClaimStringSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ASSETCLAIMSTRINGSET_EVENT, transactionReceipt);
        ArrayList<AssetClaimStringSetEventResponse> responses = new ArrayList<AssetClaimStringSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AssetClaimStringSetEventResponse typedResponse = new AssetClaimStringSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.claim_code = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AssetClaimStringSetEventResponse> assetClaimStringSetEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, AssetClaimStringSetEventResponse>() {
            @Override
            public AssetClaimStringSetEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ASSETCLAIMSTRINGSET_EVENT, log);
                AssetClaimStringSetEventResponse typedResponse = new AssetClaimStringSetEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.claim_code = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<AssetClaimStringSetEventResponse> assetClaimStringSetEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ASSETCLAIMSTRINGSET_EVENT));
        return assetClaimStringSetEventObservable(filter);
    }

    public List<NewTradeOfferEventResponse> getNewTradeOfferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWTRADEOFFER_EVENT, transactionReceipt);
        ArrayList<NewTradeOfferEventResponse> responses = new ArrayList<NewTradeOfferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewTradeOfferEventResponse typedResponse = new NewTradeOfferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.my_items = (List<BigInteger>) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.their_items = (List<BigInteger>) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewTradeOfferEventResponse> newTradeOfferEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewTradeOfferEventResponse>() {
            @Override
            public NewTradeOfferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWTRADEOFFER_EVENT, log);
                NewTradeOfferEventResponse typedResponse = new NewTradeOfferEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.my_items = (List<BigInteger>) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.their_items = (List<BigInteger>) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<NewTradeOfferEventResponse> newTradeOfferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWTRADEOFFER_EVENT));
        return newTradeOfferEventObservable(filter);
    }

    public List<ModifyTradeOfferEventResponse> getModifyTradeOfferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MODIFYTRADEOFFER_EVENT, transactionReceipt);
        ArrayList<ModifyTradeOfferEventResponse> responses = new ArrayList<ModifyTradeOfferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ModifyTradeOfferEventResponse typedResponse = new ModifyTradeOfferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.state = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ModifyTradeOfferEventResponse> modifyTradeOfferEventObservable(EthFilter filter) {
        return web3j.ethLogObservable(filter).map(new Func1<Log, ModifyTradeOfferEventResponse>() {
            @Override
            public ModifyTradeOfferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MODIFYTRADEOFFER_EVENT, log);
                ModifyTradeOfferEventResponse typedResponse = new ModifyTradeOfferEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.state = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ModifyTradeOfferEventResponse> modifyTradeOfferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MODIFYTRADEOFFER_EVENT));
        return modifyTradeOfferEventObservable(filter);
    }

    public static Exchange load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchange(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Exchange load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchange(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class AssetAssignEventResponse {
        public Log log;

        public BigInteger id;

        public String user;

        public String emitter;

        public String data;
    }

    public static class AssetBurnEventResponse {
        public Log log;

        public BigInteger id;
    }

    public static class AssetMoveEventResponse {
        public Log log;

        public BigInteger id;

        public String from;

        public String to;
    }

    public static class AssetClaimStringSetEventResponse {
        public Log log;

        public BigInteger id;

        public String claim_code;
    }

    public static class NewTradeOfferEventResponse {
        public Log log;

        public BigInteger id;

        public String sender;

        public String receiver;

        public List<BigInteger> my_items;

        public List<BigInteger> their_items;
    }

    public static class ModifyTradeOfferEventResponse {
        public Log log;

        public BigInteger id;

        public BigInteger state;
    }
}
